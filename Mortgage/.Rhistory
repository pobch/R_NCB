install.packages('installr')
library(installr)
updateR()
version()
library(installr)
install.packages('installr')
library(installr)
updateR()
setwd('D:\\SAS_data\\Chk_data')
library(readr)
library(dplyr)
library(tibble)
library(ggplot2)
library(tidyr)
library(rpart)
library(rpart.plot)
library(caret)
library(e1071)
df = read_csv("MG_ALL_18MTH.csv",
col_types = cols(
SYSTEM_ID = col_character(),
TRADE_SERIAL = col_character(),
INSTALLMENT_FREQUENCY = col_character(),
ACCOUNT_STATUS = col_character(),
DELAY_PAYMENT_CODE = col_character(),
Delay_Payment_code_n1 = col_character(),
Delay_Payment_code_n2 = col_character(),
Delay_Payment_code_n3 = col_character(),
Delay_Payment_code_n4 = col_character(),
Delay_Payment_code_n5 = col_character(),
Delay_Payment_code_n6 = col_character(),
Delay_Payment_code_n7 = col_character(),
Delay_Payment_code_n8 = col_character(),
Delay_Payment_code_n9 = col_character(),
Delay_Payment_code_n10 = col_character(),
Delay_Payment_code_n11 = col_character(),
All_Payment_code_n = col_character(),
OWNERSHIP_INDICATOR = col_character(),
DATE_ACCOUNT_CLOSED = col_date(format = '%d%b%Y'),
REPORT_DATE = col_date(format = '%d%b%Y'),
DATE_ACCOUNT_OPENED = col_date(format = '%d%b%Y'),
DATE_LAST_PAYMENT = col_date(format = '%d%b%Y'),
DEFAULT_DATE = col_date(format = '%d%b%Y'),
DATE_LAST_RESTRUCTURED = col_date(format = '%d%b%Y')
))
glimpse(df)
df = df[, c("SYSTEM_ID", "TRADE_SERIAL", "ID", "CUSTOMER_TYPE", "OWNERSHIP_INDICATOR",
"REPORT_DATE", "DATE_ACCOUNT_OPENED", "MOB1", "DATE_ACCOUNT_CLOSED",
"DATE_LAST_PAYMENT",  "DEFAULT_DATE", "DATE_LAST_RESTRUCTURED",
"INSTALLMENT_FREQUENCY", "INSTALLMENT_NUMBER_PAYMENT", "INSTALLMENT_AMOUNT", "AMOUNT_PAST_DUE",
"ACCOUNT_TYPE",
"ACCOUNT_STATUS", "TYPE_OF_CREDIT_CARD", "MINIMUM_PERCENT_PAYMENT",
"Delay_Payment_code1", "Delay_Payment_code2", "Delay_Payment_code3", "Delay_Payment_code4",
"Delay_Payment_code5", "Delay_Payment_code6", "All_Payment_code",
"Loan_amount1", "Loan_amount2", "Loan_amount3", "Loan_amount4", "Loan_amount5","Loan_amount6",
"Amount_owe1", "Amount_owe2", "Amount_owe3", "Amount_owe4", "Amount_owe5", "Amount_owe6",
"Utilization1", "Utilization2", "Utilization3", "Utilization4",
"Utilization5", "Utilization6", "AVG_Utilization_3MTH", "AVG_Utilization_6MTH",
"Amount_Owe_Momentum1", "Amount_Owe_Momentum2", "Amount_Owe_Momentum3",
"Amount_Owe_Momentum4", "Amount_Owe_Momentum5", "Utilization_Momentum1",
"Utilization_Momentum2", "Utilization_Momentum3", "Utilization_Momentum4",
"Utilization_Momentum5",  "All_0_6Mth", "ALL_0_below6Mth",
"Ever30plus_6MTH", "Ever30plus_5MTH", "Ever30plus_4MTH", "Ever30plus_3MTH",
"Ever60plus_6MTH", "Ever60plus_5MTH", "Ever60plus_4MTH", "Ever60plus_3MTH",
"EverXplus_6MTH", "EverXplus_5MTH", "EverXplus_4MTH", "EverXplus_3MTH",
"Momentum1", "Momentum2", "Momentum3", "Momentum4", "Momentum5",
"Min_Momentum", "Max_Momentum", "Number_of_1", "Number_of_1plus",
"Number_of_2", "Number_of_2plus", "Number_of_3plus", "ACCOUNT_STATUS_CODE",
"Number_OF_Term", "Num_OF_Y", "Num_OF_N", "Count_Y", "Momentum1_OD",
"Momentum2_OD", "Momentum3_OD", "Momentum4_OD", "Momentum5_OD",
"Min_Momentum_OD", "Max_Momentum_OD", "Num_PL", "Num_CC", "Num_HP",
"Num_HL", "Num_OD", "Num_OTH_HP", "Num_CL", "Num_COL", "Num_RD",
"Num_OL", "Num_A_PL", "Num_A_CC", "Num_A_HP", "Num_A_HL", "Num_A_OD",
"Num_A_OTH_HP", "Num_A_CL", "Num_A_COL", "Num_A_RD", "Num_A_OL",
"Loan_amount", "Amount_owe", "DELAY_PAYMENT_CODE", "Utilization",
"Loan_amount_n1", "Amount_owe_n1", "Delay_Payment_code_n1", "Utilization_n1",
"Loan_amount_n2", "Amount_owe_n2", "Delay_Payment_code_n2", "Utilization_n2",
"Loan_amount_n3", "Amount_owe_n3", "Delay_Payment_code_n3", "Utilization_n3",
"Loan_amount_n4", "Amount_owe_n4", "Delay_Payment_code_n4", "Utilization_n4",
"Loan_amount_n5", "Amount_owe_n5", "Delay_Payment_code_n5", "Utilization_n5",
"Loan_amount_n6", "Amount_owe_n6", "Delay_Payment_code_n6", "Utilization_n6",
"Loan_amount_n7", "Amount_owe_n7", "Delay_Payment_code_n7", "Utilization_n7",
"Loan_amount_n8", "Amount_owe_n8", "Delay_Payment_code_n8", "Utilization_n8",
"Loan_amount_n9", "Amount_owe_n9", "Delay_Payment_code_n9", "Utilization_n9",
"Loan_amount_n10", "Amount_owe_n10", "Delay_Payment_code_n10",
"Utilization_n10", "Loan_amount_n11", "Amount_owe_n11", "Delay_Payment_code_n11",
"Utilization_n11", "All_Payment_code_n", "AVG_Utilization_n3MTH",
"AVG_Utilization_n6MTH", "AVG_Utilization_n9MTH", "AVG_Utilization_n12MTH",
"Amount_Owe_Momentum_n1", "Amount_Owe_Momentum_n2", "Amount_Owe_Momentum_n3",
"Amount_Owe_Momentum_n4", "Amount_Owe_Momentum_n5", "Amount_Owe_Momentum_n6",
"Amount_Owe_Momentum_n7", "Amount_Owe_Momentum_n8", "Amount_Owe_Momentum_n9",
"Amount_Owe_Momentum_n10", "Amount_Owe_Momentum_n11", "Utilization_Momentum_n1",
"Utilization_Momentum_n2", "Utilization_Momentum_n3", "Utilization_Momentum_n4",
"Utilization_Momentum_n5", "Utilization_Momentum_n6", "Utilization_Momentum_n7",
"Utilization_Momentum_n8", "Utilization_Momentum_n9", "Utilization_Momentum_n10",
"Utilization_Momentum_n11", "ALL_0_n12MTh", "ALL_0_below_n12Mth",
"EverXplus_n12MTH", "Ever30plus_n12MTH", "Ever60plus_n12MTH",
"Number_of_1_n12MTH", "Number_of_1plus_n12MTH", "Number_of_2_n12MTH",
"Number_of_2plus_n12MTH", "Number_of_3plus_n12MTH", "max_delay",
"Momentum_n1", "Momentum_n2", "Momentum_n3", "Momentum_n4", "Momentum_n5",
"Momentum_n6", "Momentum_n7", "Momentum_n8", "Momentum_n9", "Momentum_n10",
"Momentum_n11", "Min_Momentum_n", "Max_Momentum_n")]
df = subset(df, !is.na(Loan_amount1) &
!is.na(Loan_amount2) &
!is.na(Loan_amount3) &
!is.na(Loan_amount4) &
!is.na(Loan_amount5) &
!is.na(Loan_amount6) &
!is.na(Amount_owe1) &
!is.na(Amount_owe2) &
!is.na(Amount_owe3) &
!is.na(Amount_owe4) &
!is.na(Amount_owe5) &
!is.na(Amount_owe6))
df$nUtil123 = apply(df[, c('Utilization1', 'Utilization2', 'Utilization3')], 1, function(x) {sum(!is.na(x))})
df$stdUtil123 = apply(df[ , c('Utilization1', 'Utilization2', 'Utilization3')], 1, sd, na.rm = T)
df$nUtil456 = apply(df[, c('Utilization4', 'Utilization5', 'Utilization6')], 1, function(x) {sum(!is.na(x))})
df$stdUtil456 = apply(df[ , c('Utilization4', 'Utilization5', 'Utilization6')], 1, sd, na.rm = T)
df$nUtil1to6 = apply(df[, c('Utilization1', 'Utilization2', 'Utilization3', 'Utilization4', 'Utilization5', 'Utilization6')], 1, function(x) {sum(!is.na(x))})
df$stdUtil1to6 = apply(df[ , c('Utilization1', 'Utilization2', 'Utilization3', 'Utilization4', 'Utilization5', 'Utilization6')], 1, sd, na.rm = T)
df$nloans = apply(df[, 96:105], 1, sum)
df$nactiveloans = apply(df[, 106:115], 1, sum)
table(df$nUtil1to6 == (df$nUtil123 + df$nUtil456))
df$max_util_momentum = apply(df[, c('Utilization_Momentum1', 'Utilization_Momentum2', 'Utilization_Momentum3',
'Utilization_Momentum4', 'Utilization_Momentum5')], 1,
max, na.rm = T)
df$min_util_momentum = apply(df[, c('Utilization_Momentum1', 'Utilization_Momentum2', 'Utilization_Momentum3',
'Utilization_Momentum4', 'Utilization_Momentum5')], 1,
min, na.rm = T)
subdf = df[which(df$ACCOUNT_TYPE != '04'), c("SYSTEM_ID", "TRADE_SERIAL",
"REPORT_DATE", "DATE_ACCOUNT_OPENED", "MOB1", "DATE_ACCOUNT_CLOSED",
"DATE_LAST_PAYMENT",  "DEFAULT_DATE", "DATE_LAST_RESTRUCTURED",
"INSTALLMENT_NUMBER_PAYMENT", "INSTALLMENT_AMOUNT", "AMOUNT_PAST_DUE",
"ACCOUNT_TYPE",
"ACCOUNT_STATUS",
"Loan_amount1", "Loan_amount2", "Loan_amount3", "Loan_amount4", "Loan_amount5","Loan_amount6",
"Amount_owe1", "Amount_owe2", "Amount_owe3", "Amount_owe4", "Amount_owe5", "Amount_owe6",
"Utilization1", "Utilization2", "Utilization3", "Utilization4",
"Utilization5", "Utilization6", "AVG_Utilization_3MTH", "AVG_Utilization_6MTH",
"Amount_Owe_Momentum1", "Amount_Owe_Momentum2", "Amount_Owe_Momentum3",
"Amount_Owe_Momentum4", "Amount_Owe_Momentum5", "Utilization_Momentum1",
"Utilization_Momentum2", "Utilization_Momentum3", "Utilization_Momentum4",
"Utilization_Momentum5",  "All_0_6Mth", "ALL_0_below6Mth",
"Ever30plus_6MTH", "Ever30plus_5MTH", "Ever30plus_4MTH", "Ever30plus_3MTH",
"Ever60plus_6MTH", "Ever60plus_5MTH", "Ever60plus_4MTH", "Ever60plus_3MTH",
"EverXplus_6MTH", "EverXplus_5MTH", "EverXplus_4MTH", "EverXplus_3MTH",
"Momentum1", "Momentum2", "Momentum3", "Momentum4", "Momentum5",
"Min_Momentum", "Max_Momentum", "Number_of_1", "Number_of_1plus",
"Number_of_2", "Number_of_2plus", "Number_of_3plus", "ACCOUNT_STATUS_CODE",
"Num_PL", "Num_CC", "Num_HP",
"Num_HL", "Num_OD", "Num_OTH_HP", "Num_CL", "Num_COL", "Num_RD",
"Num_OL", "Num_A_PL", "Num_A_CC", "Num_A_HP", "Num_A_HL", "Num_A_OD",
"Num_A_OTH_HP", "Num_A_CL", "Num_A_COL", "Num_A_RD", "Num_A_OL",
"min_util_momentum", "max_util_momentum", "stdUtil123", "stdUtil456",
"stdUtil1to6", "nloans", "nactiveloans", "Ever30plus_n12MTH")]
subdf_od = df[which(df$ACCOUNT_TYPE == '04'), c("SYSTEM_ID", "TRADE_SERIAL",
"REPORT_DATE", "DATE_ACCOUNT_OPENED", "MOB1", "DATE_ACCOUNT_CLOSED",
"DATE_LAST_PAYMENT",  "DEFAULT_DATE", "DATE_LAST_RESTRUCTURED",
"INSTALLMENT_FREQUENCY", "INSTALLMENT_NUMBER_PAYMENT", "INSTALLMENT_AMOUNT", "AMOUNT_PAST_DUE",
"ACCOUNT_TYPE",
"ACCOUNT_STATUS", "TYPE_OF_CREDIT_CARD", "MINIMUM_PERCENT_PAYMENT",
"Loan_amount1", "Loan_amount2", "Loan_amount3", "Loan_amount4", "Loan_amount5","Loan_amount6",
"Amount_owe1", "Amount_owe2", "Amount_owe3", "Amount_owe4", "Amount_owe5", "Amount_owe6",
"Utilization1", "Utilization2", "Utilization3", "Utilization4",
"Utilization5", "Utilization6", "AVG_Utilization_3MTH", "AVG_Utilization_6MTH",
"Amount_Owe_Momentum1", "Amount_Owe_Momentum2", "Amount_Owe_Momentum3",
"Amount_Owe_Momentum4", "Amount_Owe_Momentum5", "Utilization_Momentum1",
"Utilization_Momentum2", "Utilization_Momentum3", "Utilization_Momentum4",
"Utilization_Momentum5",
"ACCOUNT_STATUS_CODE",
"Number_OF_Term", "Num_OF_Y", "Num_OF_N", "Count_Y", "Momentum1_OD",
"Momentum2_OD", "Momentum3_OD", "Momentum4_OD", "Momentum5_OD",
"Min_Momentum_OD", "Max_Momentum_OD", "Num_PL", "Num_CC", "Num_HP",
"Num_HL", "Num_OD", "Num_OTH_HP", "Num_CL", "Num_COL", "Num_RD",
"Num_OL", "Num_A_PL", "Num_A_CC", "Num_A_HP", "Num_A_HL", "Num_A_OD",
"Num_A_OTH_HP", "Num_A_CL", "Num_A_COL", "Num_A_RD", "Num_A_OL",
"min_util_momentum", "max_util_momentum", "stdUtil123", "stdUtil456",
"stdUtil1to6", "nloans", "nactiveloans", "Ever30plus_n12MTH")]
df2 = select(subdf, -SYSTEM_ID, -TRADE_SERIAL)
df3 = na.omit(df2)
tr.control = trainControl(method = 'cv', number = 10)
cp.grid = expand.grid(.cp = seq(0, 0.001, 0.0001))
train(Ever30plus_n12MTH ~ ., data = df3, method = 'rpart', trControl = tr.control, tuneGrid = cp.grid)
mod1 = rpart(Ever30plus_n12MTH ~ ., data = df3, method = 'class', cp =0.001)
df
df[1]
df[ncol(df)]
df[ncol(df) + 1]
df[ncol(df) + 1] = 7
df[ncol(df) + 1]
df[ncol(df)]
df[ncol(df)] = NULL
df[ncol(df)]
names(df)
names(df)[-1]
?append
names(df)-1
df['aaa'] = 7
df$aaa
df$aaa = NULL
?apply
?mapply
warnings()
gini_index = function(classes,splitvar = NULL) {
if (is.null(splitvar)) {
base_prob = table(classes)/length(classes)
return(sum(base_prob**2))
}
if(length(table(splitvar)) < 2){
return(NA)
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- sum(crossprob[,1]**2)
Yes_Node_Gini <- sum(crossprob[,2]**2)
# weight gini by base_prob:
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
setwd('C:\\My Jobs\\gini')
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
gini_index(df$V5, df$V1 < 1.7)
setwd('D:\\R_codes\\Mortgage')
gini_index = function(classes,splitvar = NULL) {
if (is.null(splitvar)) {
base_prob = table(classes)/length(classes)
return(sum(base_prob**2))
}
if(length(table(splitvar)) < 2){
return(NA)
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- sum(crossprob[,1]**2)
Yes_Node_Gini <- sum(crossprob[,2]**2)
# weight gini by base_prob:
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
setwd('D:\\R_codes\\Mortgage')
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
gini_index(df$V5, df$V1 < 1.7)
mapply(gini_index, classes = df$V5, splitvar = df$V1 < df$V1)
class(mapply(gini_index, classes = df$V5, splitvar = df$V1 < df$V1))
mapply(gini_index, classes = df$V5, splitvar = df$V1 < df$V1)
?do.call
tmp <- expand.grid(letters[1:2], 1:3, c("+", "-"))
tmp
do.call("paste", c(tmp, sep = ""))
lastcol = ncol(df) - 1
for(i in lastcol){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df$V5, df[i] < x[i] ) })
}
names(df)
df$V4_gini
setwd('D:\\R_codes\\Mortgage')
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
lastcol = ncol(df) - 1
for(i in 1:lastcol){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df$V5, df[i] < x[i] ) })
}
names(df)
max(df$V1_gini)
min(df$V1_gini)
max(df$V1_gini, na.rm =  T)
which(max(df$V1_gini, na.rm =  T))
which(df$V1_gini == max(df$V1_gini, na.rm =  T))
for(i in 1:nrow(df)){
df$V1gini[i] = gini_index(df$V5, df$V1 < df$V1[i])
}
which.max(df$V1gini)
setwd('D:\\R_codes\\Mortgage')
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
lastcol = ncol(df) - 1
all_gini = function(df, target_col_vec, features_col_range) {
for(i in features_col_range){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(target_col, df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, df$V5, 1:ncol(df)-1)
all_gini = function(df, target_col_vec, features_col_range) {
for(i in features_col_range){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(target_col_vec, df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, df$V5, 1:ncol(df)-1)
all_gini = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[target_col_name], df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, 'V5', 1:ncol(df)-1)
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
all_gini = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[target_col_name], df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, 'V5', 1:ncol(df)-1)
all_gini = function(df, target_col_name, features_col_range) {
df = df
for(i in features_col_range){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[target_col_name], df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, 'V5', 1:ncol(df)-1)
1:ncol(df-1)
1:ncol(df)-1
1:ncol(df)-1
ncol(df)-1
1:(ncol(df)-1)
all_gini = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[target_col_name], df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, 'V5', 1:(ncol(df)-1))
range = 1:(ncol(df)-1)
df2 = all_gini(df, 'V5', range)
df2 = all_gini(df, 'V5', 1:(ncol(df)-1))
df2
df['V5']
gg = 'V5'
df[gg]
df[V5]
df$gg
df[gg]
all_gini = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, 'V5', 1:(ncol(df)-1))
df2
max(df2$V1_gini, na.rm = T)
which.max(df2$V1_gini, na.rm = T))
which.max(df2$V1_gini, na.rm = T)
which.max(df2$V1_gini)
which.max(df$V1gini)
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
gini_index(df$V5, df$V1 < 1.7)
for(i in 1:nrow(df)){
df$V1gini[i] = gini_index(df$V5, df$V1 < df$V1[i])
}
which.max(df$V1gini)
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
all_gini = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, 'V5', 1:(ncol(df)-1))
which.max(df2$V1_gini)
names(df2)
max(df2[i], na.rm = T)
for(i in 6:9){
max(df2[i], na.rm = T)
}
for(i in 6:9){
print(max(df2[i], na.rm = T))
}
setwd('D:\\R_codes\\Mortgage')
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
df
cp.grid = expand.grid(.cp = seq(0, 0.001, 0.0001))
cp.grid
?expand.grid
x <- seq(0, 10, length.out = 100)
x
expand.grid(height = seq(60, 80, 5), weight = seq(100, 300, 50),
sex = c("Male","Female"))
class(cp.grid)
df
df$V4.5 = sample(c('Y', 'N'),1372, replace = T)
df
class(df$4.5)
class(df$V4.5)
saved = df
tmp = df$V5
df$V5 = NULL
df$V5 = tmp
df
saved = df
str(saved)
table(df$V4.5)
df$V4.5 = sample(c('Y', 'N', 'A', 'B', 'B'), 1372, replace = T)
df
table(df$V4.5)
saved = df
Age <- numeric()
Name <- character()
ID <- integer()
Gender <- factor()
Date <- as.Date(character())
ab <- data.frame(c(Age, Name, ID, Gender, Date))
ab
ab
str(ab)
Age <- numeric()
Name <- character()
ID <- integer()
Gender <- factor()
Date <- as.Date(character())
ab <- data.frame(c(Age, Name, ID, Gender, Date))
ab
Age <- numeric()
Name <- character()
ID <- integer()
Gender <- factor()
Date <- as.Date(character())
ab <- data.frame(c(Age, Name, ID, Gender, Date))
ab
str(ab)
Age
is.numeric(ID)
is.numeric(Age)
is.numeric(Name)
is.numeric(Date)
is.character(Age)
is.character(Name)
is.character(Gender)
is.numeric(Gender)
is.factor(Gender)
?factor
Gender = factor(c('M','F','F','kkkk'))
Gender
all_gini = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
print('number of NA in ', names(df)[i], '= ', sum(is.na(df[i])))
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, 'V5', 1:4)
all_gini = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
print(paste0('number of NA in ', names(df)[i], '= ', sum(is.na(df[i]))))
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, 'V5', 1:4)
all_gini = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
print(paste0('number of NA in ', names(df)[i], ' = ', sum(is.na(df[i]))))
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[i] < x[i] ) })
}
return(df)
}
df2 = all_gini(df, 'V5', 1:5)
'Y' < 'N'
'Y' > 'N'
class(df[1])
class(df[[1]])
