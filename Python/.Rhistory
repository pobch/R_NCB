df
df$e = coredata(e)
df$e2 = e
df
?step
table(df$c)
table(table(df$c))
library(readr)
?vignette
vignette('column-types')
setwd('D:\\SAS_data\\Chk_data')
library(readr)
library(dplyr)
library(tibble)
library(ggplot2)
library(tidyr)
df = read_delim('NIDA_TXT_MTH_1505.csv', delim = '|',
col_types = cols(
.default = col_character(),
SYSTEM_ID = col_integer(),
TRADE_SERIAL = col_integer(),
OWNERSHIP_INDICATOR = col_character(),
INSTALLMENT_FREQUENCY = col_integer(),
INSTALLMENT_NUMBER_PAYMENT = col_integer(),
CREDIT_LINE = col_number(),
CREDIT_USE = col_number(),
INSTALLMENT_AMOUNT = col_number(),
AMOUNT_PAST_DUE = col_number(),
ACCOUNT_STATUS = col_integer(),
MINIMUM_PERCENT_PAYMENT = col_integer()
))
df = read_csv("P_loan_ALL_18MTH.csv",
col_types = cols(
DELAY_PAYMENT_CODE = col_character(),
Delay_Payment_code_n1 = col_character(),
Delay_Payment_code_n2 = col_character(),
Delay_Payment_code_n3 = col_character(),
Delay_Payment_code_n4 = col_character(),
Delay_Payment_code_n5 = col_character(),
Delay_Payment_code_n6 = col_character(),
Delay_Payment_code_n7 = col_character(),
Delay_Payment_code_n8 = col_character(),
Delay_Payment_code_n9 = col_character(),
Delay_Payment_code_n10 = col_character(),
Delay_Payment_code_n11 = col_character(),
All_Payment_code_n = col_character(),
OWNERSHIP_INDICATOR = col_character(),
DATE_ACCOUNT_CLOSED = col_date(format = '%d%b%Y'),
REPORT_DATE = col_date(format = '%d%b%Y'),
DATE_ACCOUNT_OPENED = col_date(format = '%d%b%Y'),
DATE_LAST_PAYMENT = col_date(format = '%d%b%Y'),
DEFAULT_DATE = col_date(format = '%d%b%Y'),
DATE_LAST_RESTRUCTURED = col_date(format = '%d%b%Y')
))
library(readr)
library(dplyr)
library(tibble)
library(ggplot2)
library(tidyr)
df = data.frame(a = c(1,2,3), b = c('x','y', 'z'))
df
class(df$a)
class(df[[1]])
class(df[[a]])
class(df[['a']])
class(df[1])
df[1]
df$1
df$a
df['a']
df$a
class(df['a'])
df
df$b
class(df$b)
class(df[[2]])
class(df[2)
class(df[2])
class(df['b'])
df['a']
df['c'] = 7
df
df[['d']] = 99
df
for(i in names(df)) { print(i)}
for(i in nrow(df)) { print(i)}
for(i in 1:nrow(df)) { print(i)}
for(i in 1:ncol(df)) { print(i)}
for(i in ncol(df)) { print(i)}
library(combinat)
install.packages('combinat')
library(combinat)
combn(c('a','b','c','d'),2)
combn(c('a','b','c','d','a'),2)
print(i)
for (i in 1:4.5){
print(i)
}
for (i in 1:4.7){
print(i)
}
1:8
1:8.888
1:8.5
1:8.2
1:8.7
library(combinat)
combn(c('a','b','c','d'), 3)
class(combn(c('a','b','c','d'), 3))
as.data.frame(combn(c('a','b','c','d'), 3))
library(combinat)
gini_index = function(classes,splitvar = NULL) {
if (is.null(splitvar)) {
base_prob = table(classes)/length(classes)
return(sum(base_prob**2))
}
if(length(table(splitvar)) < 2){
return(NA)
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- sum(crossprob[,1]**2)
Yes_Node_Gini <- sum(crossprob[,2]**2)
# weight gini by base_prob:
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
setwd('C:\\My Jobs\\gini')
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
gini_index(df$V5, df$V1 < 1.7)
for(i in 1:nrow(df)){
df$V1gini[i] = gini_index(df$V5, df$V1 < df$V1[i])
}
which.max(df$V1gini) # ANS:284
df[c(1,3,4)]
df[c(1:3,4)]
df[c(1:3,4),]
df[,c(1:3,4)]
unique(df$V3)
>rbind
?rbind
rbind(df, c(1,2))
tail(df)
rbind(df, c(1,2))
tmp = rbind(df, c(1,2))
tail(tmp)
tmp = rbind(df, V1 =5)
tail(tmp)
tmp = rbind(df, data.frame(V1=5))
tmp = rbind(df, data.frame(V1=5, V2=7, V3=8))
library(dplyr)
bind_rows(df, data.frame(V1=6, V2=8))
tmp = bind_rows(df, data.frame(V1=6, V2=8))
tail(tmp)
tmp = data.frame()
tmp
?data.frame
tmp = data.frame(NG,GG,KK)
tmp = data.frame(NG = NA,GG,KK)
tmp = data.frame(NG = NA,GG = NA,KK = NA)
tmp
tmp = data.frame()
rbind(tmp, c(1,2,3,4,5))
tmp = data.frame()
names(tmp) = c('a', 'b','c')
colnames(tmp) = c('a', 'b','c')
character(5)
numeric(6)
?paste
paste(c('a','b','c'), sep = ',')
paste(c('a','b','c'), sep = ',', collapse = ' ')
paste(c('a','b','c'), sep = ',', collapse = '')
paste(c('a','b','c'), sep = ',', collapse = ',')
paste(c('a','b','c'), collapse = ',')
paste(c('a','b','c'), collapse = ', ')
c('a', 5, 8, '6')
data.frame('a', 2, 5)
tmp = data.frame('a', 2, 5)
str(tmp)
tmp2 = data.frame('b', 2, 5)
tmp2
names(tmp2)
str(tmp2)
names(tmp2)[names(tmp2) == 'X.b.'] = 'X.a.'
names(tmp2)
rbind(tmp , tmp2)
tmp3 = (rbind(tmp , tmp2))
str(tmp3)
tmp2$X.a. = as.character(tmp2$X.a.)
str(tmp2)
tmp3 = rbind(tmp , tmp2)
tmp3
str(tmp2)
str(tmp3)
tmp3$X2[1]
tmp3$X2[1] = c(1,2,3)
tmp3
paste(tmp3$X.a., collapse = ', ')
paste(tmp3[X.a.], collapse = ', ')
paste(tmp3["X.a."], collapse = ', ')
paste(tmp3[1], collapse = ', ')
tmp3[1]
paste(tmp3[2], collapse = ', ')
paste(tmp3[3], collapse = ', ')
paste(tmp3[[3]], collapse = ', ')
paste(tmp3[[2]], collapse = ', ')
tmp3$X.a. in c('a')
tmp3$X.a. isin c('a')
tmp3$X.a. %in% c('a')
tmp3[1]
tmp3[1] %in% c('a')
tmp3[1] %in% c('a','c')
tmp3[[1]] %in% c('a','c')
?setdiff
test = c('a','b','c')
test[test %in% c('a', 'd')]
test[!(test %in% c('a', 'd'))]
library(combinat)
gini_index = function(classes,splitvar = NULL) {
if (is.null(splitvar)) {
base_prob = table(classes)/length(classes)
return(sum(base_prob**2))
}
if(length(table(splitvar)) < 2){
return(NA)
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- sum(crossprob[,1]**2)
Yes_Node_Gini <- sum(crossprob[,2]**2)
# weight gini by base_prob:
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
setwd('C:\\My Jobs\\gini')
df = read.csv("data_banknote_authentication.txt", header = FALSE) #df$V5 is the target variable
all_gini_num = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
print(paste0('number of NA in ', names(df)[i], ' = ', sum(is.na(df[i]))))
if(is.numeric(df[[i]])){
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[i] < x[i] ) })
} else {
print(paste0(names(df)[i],' is not numeric'))
}
}
return(df)
}
all_gini_cat = function(df, target_col_name, features_col_range){
cat.gini = data.frame(feature.name = character(),
group1 = character(),
group2 = character(),
gini.score = numeric(),
stringsAsFactors = F)
for(i in features_col_range){
values = unique(df[[i]])
for(group.num in 1:(length(values)/2)){
group1.num = group.num
group2.num = length(values) - group1.num
group1.prob = as.data.frame(combn(values, group1.num))
for(group1.case in 1:ncol(group1.prob)){
gini.case = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[[i]] %in% group1.prob[[group1.case]]) })
tmp = data.frame(feature.name = names(df)[i],
group1 = paste(group1.prob[[group1.case]], collapse = ', '),
group2 = paste(values[!(values %in% group1.prob[[group1.case]])], collapse = ', '),
gini.score = gini.case,
stringsAsFactors = F)
cat.gini = rbind(cat.gini, tmp)
}
}
}
}
df2 = all_gini_num(df, 'V5', 1:5)
glimpse(df)
v5 = df$V5
df$V5 = NULL
df$V4.1 = sample(c('Y','N','O','P','U','U','Y'), 1372)
df$V4.1 = sample(c('Y','N','O','P','U','U','Y'), 1372, replace = T)
table(df$V4.1)
df$V4.2 = sample(c('Y','N','N'), 1372, replace = T)
table(df$V4.2)
df$V5 = v5
saed = df
saved = df
df
glimpse(df)
df2 = all_gini_num(df, 'V5', 1:5)
df2
all_gini_cat = function(df, target_col_name, features_col_range){
cat.gini = data.frame(feature.name = character(),
group1 = character(),
group2 = character(),
gini.score = numeric(),
stringsAsFactors = F)
for(i in features_col_range){
values = unique(df[[i]])
for(group.num in 1:(length(values)/2)){
group1.num = group.num
group2.num = length(values) - group1.num
group1.prob = as.data.frame(combn(values, group1.num))
for(group1.case in 1:ncol(group1.prob)){
gini.case = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[[i]] %in% group1.prob[[group1.case]]) })
tmp = data.frame(feature.name = names(df)[i],
group1 = paste(group1.prob[[group1.case]], collapse = ', '),
group2 = paste(values[!(values %in% group1.prob[[group1.case]])], collapse = ', '),
gini.score = gini.case,
stringsAsFactors = F)
cat.gini = rbind(cat.gini, tmp)
}
}
}
return(cat.gini)
}
df3 = all_gini_cat(df, 'V5', c(5,6))
df3
combn(c('a','b','c'), 1)
df3 = all_gini_cat(df, 'V5', 6)
df3
View(df3)
all_gini_cat = function(df, target_col_name, features_col_range){
cat.gini = data.frame(feature.name = character(),
group1 = character(),
group2 = character(),
gini.score = numeric(),
stringsAsFactors = F)
for(i in features_col_range){
values = unique(df[[i]])
for(group.num in 1:(length(values)/2)){
group1.num = group.num
group2.num = length(values) - group1.num
group1.prob = as.data.frame(combn(values, group1.num))
print(paste0('Group1.NUM ',group1.num))
for(group1.case in 1:ncol(group1.prob)){
gini.case = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[[i]] %in% group1.prob[[group1.case]]) })
tmp = data.frame(feature.name = names(df)[i],
group1 = paste(group1.prob[[group1.case]], collapse = ', '),
group2 = paste(values[!(values %in% group1.prob[[group1.case]])], collapse = ', '),
gini.score = gini.case,
stringsAsFactors = F)
cat.gini = rbind(cat.gini, tmp)
print(paste0('Group1.case ',group1.case))
}
}
}
return(cat.gini)
}
df3 = all_gini_cat(df, 'V5', 5)
df[]
df[5]
table(df[5])
df3 = all_gini_cat(df, 'V5', 5)
df3
View(df3)
all_gini_cat = function(df, target_col_name, features_col_range){
cat.gini = data.frame(feature.name = character(),
group1 = character(),
group2 = character(),
gini.score = numeric(),
stringsAsFactors = F)
for(i in features_col_range){
values = unique(df[[i]])
for(group.num in 1:(length(values)/2)){
group1.num = group.num
group2.num = length(values) - group1.num
group1.prob = as.data.frame(combn(values, group1.num))
print(paste0('Group1.NUM ',group1.num))
for(group1.case in 1:ncol(group1.prob)){
gini.case = gini_index(df[[target_col_name]], df[[i]] %in% group1.prob[[group1.case]])
tmp = data.frame(feature.name = names(df)[i],
group1 = paste(group1.prob[[group1.case]], collapse = ', '),
group2 = paste(values[!(values %in% group1.prob[[group1.case]])], collapse = ', '),
gini.score = gini.case,
stringsAsFactors = F)
cat.gini = rbind(cat.gini, tmp)
print(paste0('Group1.case ',group1.case))
}
}
}
return(cat.gini)
}
df3 = all_gini_cat(df, 'V5', 5)
View(df3)
all_gini_num = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
if(is.numeric(df[[i]])){
print(paste0('number of NA in ', names(df)[i], ' = ', sum(is.na(df[i]))))
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[i] < x[i] ) })
} else {
stop(paste0(names(df)[i],' is not numeric'))
}
}
return(df)
}
all_gini_num = function(df, target_col_name, features_col_range) {
for(i in features_col_range){
if(is.numeric(df[[i]])){
print(paste0('number of NA in ', names(df)[i], ' = ', sum(is.na(df[i]))))
df[paste0(names(df)[i], '_gini')] = apply(df, 1, function(x) { gini_index(df[[target_col_name]], df[i] < x[i] ) })
} else {
stop(paste0(names(df)[i],' is not numeric'))
}
}
return(df)
}
all_gini_cat = function(df, target_col_name, features_col_range){
cat.gini = data.frame(feature.name = character(),
group1 = character(),
group2 = character(),
gini.score = numeric(),
stringsAsFactors = F)
for(i in features_col_range){
if(is.character(df[[i]]) | is.factor(df[[i]])){
print(paste0('number of NA in ', names(df)[i], ' = ', sum(is.na(df[i]))))
values = unique(df[[i]])
for(group.num in 1:(length(values)/2)){
group1.num = group.num
group2.num = length(values) - group1.num
group1.prob = as.data.frame(combn(values, group1.num))
for(group1.case in 1:ncol(group1.prob)){
gini.case = gini_index(df[[target_col_name]], df[[i]] %in% group1.prob[[group1.case]])
tmp = data.frame(feature.name = names(df)[i],
group1 = paste(group1.prob[[group1.case]], collapse = ', '),
group2 = paste(values[!(values %in% group1.prob[[group1.case]])], collapse = ', '),
gini.score = gini.case,
stringsAsFactors = F)
cat.gini = rbind(cat.gini, tmp)
}
}
} else {
stop(paste0(names(df)[i],' is not character or factor'))
}
}
return(cat.gini)
}
df2 = all_gini_num(df, 'V5', 1:5)
df77 = all_gini_num(df, 'V5', 1:5)
df77
df77
df3 = all_gini_cat(df, 'V5', 4:6)
df3 = all_gini_cat(df, 'V5', 5:6)
df3
library(dplyr)
runif(8)
runif(2)
?runif
df3 %>% group_by(feature.name) %>% summarise(max_gini = max(gini.score))
df3 %>% group_by(feature.name) %>% filter(gini.score == max(gini.score))
?rank
rank(x1 <- c(3, 1, 4, 15, 92))
x1
rank(x1)
rank(-x1)
-x1
ddf
df
df3
select(df3, -gini.score)
select(df3, -group1)
-df3$gini.score
x
x1
order(x1)
reorder(x1)
?rank
range(1)
range(2)
range(3)
range(1:3)
range(1:6)
range(1,6)
range(5)
range(555)
?range
range(555,5,55,5555,555,55,5)
range(c(555,5,55,5555,555,55,5))
?slice
x1
append(x1, 3)
x1 = append(x1, 3)
x1
rank(x1)
x1 = append(x1, 3)
x1
rank(x1)
x1 = append(x1, 3)
rank(x1)
df3 %>% group_by(feature.name) %>% mutate(the.rank = rank(-gini.score, ties.method = 'random')) %>%  filter(the.rank == 1) %>% select(-the.rank)
library(rpart)
mod1 = rpart(V5 ~ V1 + V2 + V3 + V4, data = df, method ='class')
rpart.plot(mod1)
library(rpart.plot)
rpart.plot(mod1)
prp(mod1)
mod1 = rpart(V5 ~ ., data = df, method ='class')
prp(mod1)
mod1 = rpart(V5 ~ V4.1 + V4.2, data = df, method ='class')
prp(mod1)
df
library(rpart)
library(rpart.plot)
df$V4.1 = as.factor(df$V4.1)
str(df)
df$V4.2 = as.factor(df$V4.2)
mod1 = rpart(V5 ~ V4.1 + V4.2, data = df, method ='class')
prp(mod1)
df$V5 = as.factor(df$V5)
mod1 = rpart(V5 ~ V4.1 + V4.2, data = df, method ='class')
prp(mod1)
df= saved
df
str(df)
mod1 = rpart(V5 ~ V4.1 + V4.2, data = df, method ='class', cp = 0.001)
prp(mod1)
